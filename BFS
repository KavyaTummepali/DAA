#include <iostream>
#include <vector>
#include <queue>
#include <cstring>

using namespace std;

// Direction vectors
int dRow[] = { -1, 0, 1, 0 };
int dCol[] = { 0, 1, 0, -1 };

// Function to check if a cell
// can be visited or not
bool isValid(bool vis[][100],
            int row, int col,
            int n, int m)
{
    // If cell lies out of bounds
    if (row < 0 || col < 0
        || row >= n || col >= m)
        return false;

    // If cell is already visited
    if (vis[row][col])
        return false;

    // Otherwise
    return true;
}

// Function to perform the BFS traversal
void BFS(vector<vector<int>>& grid, bool vis[][100],
        int row, int col)
{
    // Stores indices of the matrix cells
    queue<pair<int, int> > q;

    // Mark the starting cell as visited
    // and push it into the queue
    q.push({ row, col });
    vis[row][col] = true;

    // Iterate while the queue
    // is not empty
    while (!q.empty()) {

        pair<int, int> cell = q.front();
        int x = cell.first;
        int y = cell.second;

        cout << grid[x][y] << " ";

        q.pop();

        // Go to the adjacent cells
        for (int i = 0; i < 4; i++) {

            int adjx = x + dRow[i];
            int adjy = y + dCol[i];

            if (isValid(vis, adjx, adjy, grid.size(), grid[0].size())) {
                q.push({ adjx, adjy });
                vis[adjx][adjy] = true;
            }
        }
    }
}

// Driver Code
int main()
{
    // Taking input matrix dimensions from user
    int n, m;
    cout << "Enter the number of rows and columns: ";
    cin >> n >> m;

    // Taking input matrix values from user
    vector<vector<int>> grid(n, vector<int>(m));
    cout << "Enter the matrix values: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }
    }

    // Declare the visited array
    bool vis[100][100];
    memset(vis, false, sizeof vis);

    BFS(grid, vis, 0, 0);

    return 0;
}
